---
description: 
globs: *.ts
alwaysApply: false
---
Guideline TypeScript para Projetos Node.js/Extensões VS Code

Idioma
- Utilize o idioma inglês para:
  - Comentários
  - Nomes de variáveis
  - Outputs para o usuário

Validação
- Antes de implementa qualquer código, explique o que será feito e aguarde a minha confoirmação para seguir com a implementação.

Build
- Se for (re)construir a extenção, sempre use o comando npx `@vscode/vsce package`.
- Não utilize o `npm run package`

Estrutura e Organização
- Mantenha o projeto modular: separe funcionalidades em arquivos e pastas lógicas (ex: src/utils, src/services, src/commands).
- Evite arquivos grandes: prefira dividir em módulos menores e reutilizáveis.
- Siga a estrutura sugerida no README.md do projeto.
- IFs inline deve SEMPRE estar encapsulados entre chaves ({}).

Nomenclatura
- Funções e variáveis: use nomes descritivos e em inglês (ex: getUserConfig, isValidInput).
- Interfaces: prefira interface ao invés de type para objetos.
- Evite enums: use objetos ou mapas para representar conjuntos de valores.
- Pastas e arquivos: use nomes em kebab-case (ex: user-config.ts).

TypeScript
- Sempre tipar funções, parâmetros e retornos.
- Evite o uso de any. Prefira tipos explícitos ou genéricos.
- Use interfaces para contratos de dados.
- Prefira funções puras e utilitários declarativos.
- Evite classes, a menos que a API exija.

Boas Práticas
- Documente funções e módulos com JSDoc.
- Adicione comentários TODO: para pontos de melhoria ou bugs identificados.
- Evite duplicação de código.
- Prefira funções pequenas e com responsabilidade única.
- Valide entradas e trate erros de forma clara.
- Mantenha o código limpo e legível.
- Siga as recomendações e exemplos definidos em https://code.visualstudio.com/api e suas subpáginas.

Dependências
- Mantenha o package.json e o arquivo de dependências sempre atualizados.
- Remova dependências não utilizadas.
- Prefira dependências estáveis e bem mantidas.

Versionamento e Documentação
- Siga o versionamento semântico (SemVer).
- Atualize o CHANGELOG.md a cada alteração relevante, seguindo o modelo Keep a Changelog.
- Mantenha o README.md claro, atualizado e seguindo o Best-README-Template.

Testes
- Implemente testes unitários para funções críticas.
- Prefira ferramentas como Jest ou Vitest para testes em TypeScript.
- Documente como rodar os testes no README-TESTS.md.
- Scripts de testes devem ser salvos na pasta src\test

Lint e Formatação
- Use ESLint e Prettier para manter o padrão de código.
- Corrija todos os avisos e erros de lint antes de commitar.
  