// Central definition of tag behavior
// block:      tags that should be formatted as blocks (with line breaks and indentation)
//             Formatting example:
//               <table>
//                 ...
//               </table>
// inline:     tags that can appear within others without mandatory line breaks
//             Formatting example:
//               <p>
//                 Some <span>text</span> with <a href="#">link</a> and <strong>bold</strong>.
//               </p>
export const TAG_BEHAVIOR: Record<string, { type: 'block' | 'inline' }> = {
	// Confluence Storage Format
	'ac:layout': { type: 'block' },
	'ac:layout-section': { type: 'block' },
	'ac:layout-cell': { type: 'block' },
	'ac:structured-macro': { type: 'block' },
	'ac:rich-text-body': { type: 'block' },
	'ac:parameter': { type: 'inline' },
	'ac:placeholder': { type: 'inline' },
	'ac:task-list': { type: 'block' },
	'ac:task': { type: 'block' },
	'ac:task-status': { type: 'inline' },
	'ac:task-body': { type: 'block' },
	'ac:task-id': { type: 'inline' },
	'ac:task-uuid': { type: 'inline' },
	'ri:page': { type: 'block' },
	'ri:attachment': { type: 'block' },
	'ri:url': { type: 'block' },
	'ri:shortcut': { type: 'block' },
	'ri:user': { type: 'block' },
	'ri:space': { type: 'block' },
	'ri:content-entity': { type: 'block' },
	'at:declarations': { type: 'block' },
	'at:string': { type: 'inline' },
	'at:textarea': { type: 'inline' },
	'at:list': { type: 'block' },
	'at:option': { type: 'inline' },
	'at:var': { type: 'inline' },
	// HTML-like
	'p': { type: 'inline' },
	'h1': { type: 'inline' },
	'h2': { type: 'inline' },
	'h3': { type: 'inline' },
	'h4': { type: 'inline' },
	'h5': { type: 'inline' },
	'h6': { type: 'inline' },
	'pre': { type: 'block' },
	'blockquote': { type: 'block' },
	'strong': { type: 'inline' },
	'em': { type: 'inline' },
	'u': { type: 'inline' },
	'sup': { type: 'inline' },
	'sub': { type: 'inline' },
	'code': { type: 'inline' },
	'a': { type: 'inline' },
	'span': { type: 'inline' },
	'small': { type: 'inline' },
	'big': { type: 'inline' },
	'table': { type: 'block' },
	'colgroup': { type: 'block' },
	'col': { type: 'inline' },
	'thead': { type: 'block' },
	'tr': { type: 'block' },
	'th': { type: 'inline' },
	'tbody': { type: 'block' },
	'td': { type: 'inline' },
	'tfoot': { type: 'block' },
	'li': { type: 'inline' },
	// CSP
	'csp:parameters': { type: 'block' },
	'csp:properties': { type: 'block' },
	'csp:key': { type: 'inline' },
	'csp:value': { type: 'inline' },
	'csp:file_id': { type: 'inline' },
	'csp:labels_list': { type: 'inline' },
	'csp:parent_id': { type: 'inline' }
};

export const allowedTags: Record<string, string[]> = {
	// Confluence layout and macro tags
	'ac:layout': ['type', 'version', 'ac:layout-section'],
	'ac:layout-section': ['type'],
	'ac:layout-cell': ['id', 'style'],
	'ac:structured-macro': ['ac:name'],
	'ac:parameter': ['ac:name'],
	'ac:rich-text-body': [],
	'ac:link': [],
	'ac:plain-text-link-body': [],
	'ac:link-body': [],
	'ac:anchor': ['ac:name'],
	'ac:task-list': [],
	'ac:task': [],
	'ac:task-status': [],
	'ac:task-body': [],
	'ac:placeholder': [],
	'ac:emoticon': ['ac:name'],
	// Resource Identifiers tags
	'ri:page': ['ri:content-title'],
	'ri:attachment': ['ri:filename'],
	'ri:url': ['ri:value'],
	'ri:shortcut': ['ri:key', 'ri:parameter'],
	'ri:user': ['ri:account-id', 'ri:local-id'],
	'ri:space': [],
	'ri:content-entity': ['ri:content-id'],
	'ri:blog-post': ['ri:content-title', 'ri:posting-day'],
	// Template tags (variables)
	'at:declarations': [],
	'at:string': ['at:name'],
	'at:textarea': ['at:name'],
	'at:list': ['at:name'],
	'at:option': ['at:value'],
	'at:var': ['at:name'],
	// Custom plugin tags
	'csp:parameters': [],
	'csp:file_id': [],
	'csp:labels_list': [],
	'csp:parent_id': [],
	'csp:properties': [],
	'csp:key': [],
	'csp:value': [],
	// Main HTML tags supported by storage format
	'p': [],
	'h1': [],
	'h2': [],
	'h3': [],
	'h4': [],
	'h5': [],
	'h6': [],
	'strong': [],
	'em': [],
	'u': [],
	'sup': [],
	'sub': [],
	'code': [],
	'pre': [],
	'blockquote': [],
	'span': [],
	'small': [],
	'big': [],
	'a': ['href'],
	'ul': [],
	'ol': [],
	'li': [],
	'hr': [],
	'br': [],
	'table': [],
	'tbody': [],
	'thead': [],
	'tfoot': [],
	'tr': [],
	'td': [],
	'th': [],
	'img': ['src'],
	// Other common tags
	'div': [],
	'center': [],
	'ac:image': [],
	'ac:status': [],
	// Add other storage format tags as needed
};

export const allowedValues: Record<string, string[]> = {
	'ac:task-status': ['complete', 'incomplete'],
	'ac:layout@type': ['sectioned'],
	'ac:layout@version': ['1'],
	'ac:layout-section@type': ['single', 'double', 'triple', 'custom'],
	// Add other allowed values as needed
};

export const allowedHierarchy: Record<string, string[]> = {
	'ac:layout': [], // ac:layout can be root
	'ac:task': ['ac:task-list'],
	'ac:task-status': ['ac:task'],
	'ac:task-body': ['ac:task'],
	'ac:plain-text-link-body': ['ac:link'],
	'ri:page': ['ac:link', 'ri:attachment'],
	'ri:attachment': ['ac:link', 'ac:image'],
	'ri:url': ['ac:link', 'ac:image'],
	'ri:shortcut': ['ac:link'],
	'ri:user': ['ac:link'],
	'ri:space': ['ac:link'],
	'ri:content-entity': ['ac:link'],
	'at:string': ['at:declarations'],
	'at:textarea': ['at:declarations'],
	'at:list': ['at:declarations'],
	'at:option': ['at:list'],
	'at:var': ['p', 'td', 'th'],
	'ac:placeholder': ['ac:task-body', 'ul', 'li'],
	'csp:file_id': ['csp:parameters'],
	'csp:labels_list': ['csp:parameters'],
	'csp:parent_id': ['csp:parameters'],
	'csp:properties': ['csp:parameters'],
	'csp:key': ['csp:properties'],
	'csp:value': ['csp:properties'],
	'csp:parameters': [],
	'ac:layout-section': ['ac:layout'],
	'ac:layout-cell': ['ac:layout-section'],
	'p': ['ac:layout-cell'],
	'table': ['ac:layout-cell'],
	'ul': ['ac:layout-cell'],
	'ol': ['ac:layout-cell'],
	'blockquote': ['ac:layout-cell'],
	'h1': ['ac:layout-cell'],
	'h2': ['ac:layout-cell'],
	'h3': ['ac:layout-cell'],
	'h4': ['ac:layout-cell'],
	'h5': ['ac:layout-cell'],
	'h6': ['ac:layout-cell'],
	'ac:structured-macro': ['ac:layout-cell'],
	'ac:image': ['ac:layout-cell'],
	'thead': ['table'],
	'tbody': ['table'],
	'tfoot': ['table'],
	'tr': ['tbody', 'thead', 'tfoot'],
	'td': ['tr'],
	'th': ['tr'],
}; 